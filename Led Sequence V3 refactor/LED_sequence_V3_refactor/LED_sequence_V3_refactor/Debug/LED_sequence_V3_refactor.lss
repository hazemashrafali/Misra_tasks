
LED_sequence_V3_refactor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000127c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000127c  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  00001312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001974  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5d  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001173  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00004a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000889  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000149c  00000000  00000000  0000575d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006bf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_1>
       8:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_2>
       c:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_10>
      2c:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	df 00       	.word	0x00df	; ????
      56:	f8 00       	.word	0x00f8	; ????
      58:	1b 01       	movw	r2, r22
      5a:	48 01       	movw	r8, r16
      5c:	7f 01       	movw	r14, r30
      5e:	ac 01       	movw	r20, r24
      60:	cf 01       	movw	r24, r30

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ec e7       	ldi	r30, 0x7C	; 124
      76:	f2 e1       	ldi	r31, 0x12	; 18
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a2 36       	cpi	r26, 0x62	; 98
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a2 e6       	ldi	r26, 0x62	; 98
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a0 37       	cpi	r26, 0x70	; 112
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 1a 02 	call	0x434	; 0x434 <main>
      98:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <buttonpress>:
uint8  gl_u8_buttonMode_count	=0;

/*============= FUNCTION DEFINITIONS =============*/
void buttonpress(void)
{
		gl_u8_press_count++;
      a0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gl_u8_press_count>
      a4:	8f 5f       	subi	r24, 0xFF	; 255
      a6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <gl_u8_press_count>
		if(gl_u8_press_count == 8)
      aa:	88 30       	cpi	r24, 0x08	; 8
      ac:	11 f4       	brne	.+4      	; 0xb2 <buttonpress+0x12>
		gl_u8_press_count = 0;
      ae:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <gl_u8_press_count>
      b2:	08 95       	ret

000000b4 <Blink_mode>:
}

void Blink_mode(void)
{
	gl_u8_buttonMode_count++;
      b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
      b8:	8f 5f       	subi	r24, 0xFF	; 255
      ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	switch(gl_u8_buttonMode_count)
      be:	83 30       	cpi	r24, 0x03	; 3
      c0:	c9 f0       	breq	.+50     	; 0xf4 <Blink_mode+0x40>
      c2:	28 f4       	brcc	.+10     	; 0xce <Blink_mode+0x1a>
      c4:	81 30       	cpi	r24, 0x01	; 1
      c6:	41 f0       	breq	.+16     	; 0xd8 <Blink_mode+0x24>
      c8:	82 30       	cpi	r24, 0x02	; 2
      ca:	69 f0       	breq	.+26     	; 0xe6 <Blink_mode+0x32>
      cc:	28 c0       	rjmp	.+80     	; 0x11e <Blink_mode+0x6a>
      ce:	84 30       	cpi	r24, 0x04	; 4
      d0:	c1 f0       	breq	.+48     	; 0x102 <Blink_mode+0x4e>
      d2:	85 30       	cpi	r24, 0x05	; 5
      d4:	e9 f0       	breq	.+58     	; 0x110 <Blink_mode+0x5c>
      d6:	23 c0       	rjmp	.+70     	; 0x11e <Blink_mode+0x6a>
	{
		case 1:
		gl_u8_blink_mode=200;
      d8:	28 ec       	ldi	r18, 0xC8	; 200
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
      e0:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
		break;
      e4:	22 c0       	rjmp	.+68     	; 0x12a <Blink_mode+0x76>
		case 2:
		gl_u8_blink_mode=300;
      e6:	2c e2       	ldi	r18, 0x2C	; 44
      e8:	31 e0       	ldi	r19, 0x01	; 1
      ea:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
      ee:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
		break;
      f2:	1b c0       	rjmp	.+54     	; 0x12a <Blink_mode+0x76>
		case 3:
		gl_u8_blink_mode=400;
      f4:	20 e9       	ldi	r18, 0x90	; 144
      f6:	31 e0       	ldi	r19, 0x01	; 1
      f8:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
      fc:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
		break;
     100:	14 c0       	rjmp	.+40     	; 0x12a <Blink_mode+0x76>
		case 4:
		gl_u8_blink_mode=500;
     102:	24 ef       	ldi	r18, 0xF4	; 244
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
     10a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
		break;
     10e:	0d c0       	rjmp	.+26     	; 0x12a <Blink_mode+0x76>
		case 5:
		gl_u8_blink_mode=800;
     110:	20 e2       	ldi	r18, 0x20	; 32
     112:	33 e0       	ldi	r19, 0x03	; 3
     114:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
     118:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
		break;
     11c:	06 c0       	rjmp	.+12     	; 0x12a <Blink_mode+0x76>
		default:
		gl_u8_blink_mode=100;
     11e:	24 e6       	ldi	r18, 0x64	; 100
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
     126:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
		break;
	}
	if(gl_u8_buttonMode_count==6)
     12a:	86 30       	cpi	r24, 0x06	; 6
     12c:	11 f4       	brne	.+4      	; 0x132 <Blink_mode+0x7e>
	gl_u8_buttonMode_count=0;
     12e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     132:	08 95       	ret

00000134 <app_init>:
}
void app_init(void)
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	00 d0       	rcall	.+0      	; 0x13a <app_init+0x6>
     13a:	00 d0       	rcall	.+0      	; 0x13c <app_init+0x8>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
	ST_INT_Config int_0={EN_INT0,RISING};
     140:	19 82       	std	Y+1, r1	; 0x01
     142:	83 e0       	ldi	r24, 0x03	; 3
     144:	8a 83       	std	Y+2, r24	; 0x02
	ST_INT_Config int_1={EN_INT1,RISING};
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	9b 83       	std	Y+3, r25	; 0x03
     14a:	8c 83       	std	Y+4, r24	; 0x04
		
	led_init(PORTA_ID , PIN1_ID);
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 06 02 	call	0x40c	; 0x40c <led_init>
	led_init(PORTA_ID , PIN2_ID);
     154:	62 e0       	ldi	r22, 0x02	; 2
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 06 02 	call	0x40c	; 0x40c <led_init>
	led_init(PORTA_ID , PIN3_ID);
     15c:	63 e0       	ldi	r22, 0x03	; 3
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0e 94 06 02 	call	0x40c	; 0x40c <led_init>
	led_init(PORTA_ID , PIN4_ID);
     164:	64 e0       	ldi	r22, 0x04	; 4
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 06 02 	call	0x40c	; 0x40c <led_init>
	INT_init(&int_0);
     16c:	ce 01       	movw	r24, r28
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	0e 94 2d 03 	call	0x65a	; 0x65a <INT_init>
	INT_init(&int_1);
     174:	ce 01       	movw	r24, r28
     176:	03 96       	adiw	r24, 0x03	; 3
     178:	0e 94 2d 03 	call	0x65a	; 0x65a <INT_init>
	INT0_setCallBack(buttonpress);
     17c:	80 e5       	ldi	r24, 0x50	; 80
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 a6 03 	call	0x74c	; 0x74c <INT0_setCallBack>
	INT1_setCallBack(Blink_mode);
     184:	8a e5       	ldi	r24, 0x5A	; 90
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 ab 03 	call	0x756	; 0x756 <INT1_setCallBack>
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <app_start>:
void app_start(void)
{
	uint16 u16_off_delay = 0;
	uint16 u16_on_delay = 0;
     19a:	00 e0       	ldi	r16, 0x00	; 0
     19c:	10 e0       	ldi	r17, 0x00	; 0
	INT0_setCallBack(buttonpress);
	INT1_setCallBack(Blink_mode);
}
void app_start(void)
{
	uint16 u16_off_delay = 0;
     19e:	c0 e0       	ldi	r28, 0x00	; 0
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
	uint16 u16_on_delay = 0;
	
	while(1)
	{
		switch (gl_u8_press_count)
     1a2:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <gl_u8_press_count>
     1a6:	8e 2f       	mov	r24, r30
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	fc 01       	movw	r30, r24
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	e7 30       	cpi	r30, 0x07	; 7
     1b0:	f1 05       	cpc	r31, r1
     1b2:	08 f0       	brcs	.+2      	; 0x1b6 <app_start+0x1c>
     1b4:	0d c1       	rjmp	.+538    	; 0x3d0 <app_start+0x236>
     1b6:	e6 5d       	subi	r30, 0xD6	; 214
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	0c 94 36 09 	jmp	0x126c	; 0x126c <__tablejump2__>
		{
			case 1:
			led_write(PORTA_ID,PIN1_ID,PIN_HIGH);
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_on_delay);
     1c8:	b8 01       	movw	r22, r16
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     1d2:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			led_write(PORTA_ID,PIN1_ID,PIN_LOW);
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_off_delay);
     1e0:	be 01       	movw	r22, r28
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     1ea:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			break;
     1ee:	04 c1       	rjmp	.+520    	; 0x3f8 <app_start+0x25e>
			case 2:
			led_write(PORTA_ID,PIN1_ID,PIN_HIGH);
     1f0:	41 e0       	ldi	r20, 0x01	; 1
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN2_ID,PIN_HIGH);
     1fa:	41 e0       	ldi	r20, 0x01	; 1
     1fc:	62 e0       	ldi	r22, 0x02	; 2
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_on_delay);
     204:	b8 01       	movw	r22, r16
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     20e:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			led_write(PORTA_ID,PIN1_ID,PIN_LOW);
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN2_ID,PIN_LOW);
     21c:	40 e0       	ldi	r20, 0x00	; 0
     21e:	62 e0       	ldi	r22, 0x02	; 2
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_off_delay);
     226:	be 01       	movw	r22, r28
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     230:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			break;
     234:	e1 c0       	rjmp	.+450    	; 0x3f8 <app_start+0x25e>
			case 3:
			led_write(PORTA_ID,PIN1_ID,PIN_HIGH);
     236:	41 e0       	ldi	r20, 0x01	; 1
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN2_ID,PIN_HIGH);
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	62 e0       	ldi	r22, 0x02	; 2
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN3_ID,PIN_HIGH);
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	63 e0       	ldi	r22, 0x03	; 3
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_on_delay);
     254:	b8 01       	movw	r22, r16
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     25e:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			led_write(PORTA_ID,PIN1_ID,PIN_LOW);
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN2_ID,PIN_LOW);
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	62 e0       	ldi	r22, 0x02	; 2
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN3_ID,PIN_LOW);
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	63 e0       	ldi	r22, 0x03	; 3
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_off_delay);
     280:	be 01       	movw	r22, r28
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     28a:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			break;
     28e:	b4 c0       	rjmp	.+360    	; 0x3f8 <app_start+0x25e>
			case 4:
			led_write(PORTA_ID,PIN1_ID,PIN_HIGH);
     290:	41 e0       	ldi	r20, 0x01	; 1
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN2_ID,PIN_HIGH);
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	62 e0       	ldi	r22, 0x02	; 2
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN3_ID,PIN_HIGH);
     2a4:	41 e0       	ldi	r20, 0x01	; 1
     2a6:	63 e0       	ldi	r22, 0x03	; 3
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN4_ID,PIN_HIGH);
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	64 e0       	ldi	r22, 0x04	; 4
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_on_delay);
     2b8:	b8 01       	movw	r22, r16
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     2c2:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			led_write(PORTA_ID,PIN1_ID,PIN_LOW);
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN2_ID,PIN_LOW);
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	62 e0       	ldi	r22, 0x02	; 2
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN3_ID,PIN_LOW);
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	63 e0       	ldi	r22, 0x03	; 3
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN4_ID,PIN_LOW);
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	64 e0       	ldi	r22, 0x04	; 4
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_off_delay);
     2ee:	be 01       	movw	r22, r28
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     2f8:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			break;
     2fc:	7d c0       	rjmp	.+250    	; 0x3f8 <app_start+0x25e>
			case 5:	
			led_write(PORTA_ID,PIN2_ID,PIN_HIGH);
     2fe:	41 e0       	ldi	r20, 0x01	; 1
     300:	62 e0       	ldi	r22, 0x02	; 2
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN3_ID,PIN_HIGH);
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	63 e0       	ldi	r22, 0x03	; 3
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN4_ID,PIN_HIGH);
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	64 e0       	ldi	r22, 0x04	; 4
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_on_delay);
     31c:	b8 01       	movw	r22, r16
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     326:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			led_write(PORTA_ID,PIN2_ID,PIN_LOW);
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN3_ID,PIN_LOW);
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	63 e0       	ldi	r22, 0x03	; 3
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN4_ID,PIN_LOW);
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	64 e0       	ldi	r22, 0x04	; 4
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_off_delay);
     348:	be 01       	movw	r22, r28
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     352:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			break;
     356:	50 c0       	rjmp	.+160    	; 0x3f8 <app_start+0x25e>
			case 6:
			led_write(PORTA_ID,PIN3_ID,PIN_HIGH);
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	63 e0       	ldi	r22, 0x03	; 3
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN4_ID,PIN_HIGH);
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	64 e0       	ldi	r22, 0x04	; 4
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_on_delay);
     36c:	b8 01       	movw	r22, r16
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     376:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			led_write(PORTA_ID,PIN3_ID,PIN_LOW);
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	63 e0       	ldi	r22, 0x03	; 3
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN4_ID,PIN_LOW);
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	64 e0       	ldi	r22, 0x04	; 4
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_off_delay);
     38e:	be 01       	movw	r22, r28
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     398:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			break;
     39c:	2d c0       	rjmp	.+90     	; 0x3f8 <app_start+0x25e>
			case 7:
			led_write(PORTA_ID,PIN4_ID,PIN_HIGH);
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	64 e0       	ldi	r22, 0x04	; 4
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_on_delay);
     3a8:	b8 01       	movw	r22, r16
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     3b2:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			led_write(PORTA_ID,PIN4_ID,PIN_LOW);
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	64 e0       	ldi	r22, 0x04	; 4
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			tmr_delay_ms(u16_off_delay);
     3c0:	be 01       	movw	r22, r28
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 17 08 	call	0x102e	; 0x102e <__floatunsisf>
     3ca:	0e 94 25 05 	call	0xa4a	; 0xa4a <tmr_delay_ms>
			break;
     3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <app_start+0x25e>
			default:
			led_write(PORTA_ID,PIN1_ID,PIN_LOW);
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN2_ID,PIN_LOW);
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	62 e0       	ldi	r22, 0x02	; 2
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN3_ID,PIN_LOW);
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	63 e0       	ldi	r22, 0x03	; 3
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			led_write(PORTA_ID,PIN4_ID,PIN_LOW);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	64 e0       	ldi	r22, 0x04	; 4
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 17 02 	call	0x42e	; 0x42e <led_write>
			break;
		}
		u16_on_delay=gl_u8_blink_mode;
     3f8:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__data_start>
     3fc:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__data_start+0x1>
		u16_off_delay=1000-gl_u8_blink_mode;
     400:	68 ee       	ldi	r22, 0xE8	; 232
     402:	73 e0       	ldi	r23, 0x03	; 3
     404:	eb 01       	movw	r28, r22
     406:	c0 1b       	sub	r28, r16
     408:	d1 0b       	sbc	r29, r17
	}
     40a:	cb ce       	rjmp	.-618    	; 0x1a2 <app_start+0x8>

0000040c <led_init>:
#include "led.h"

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t led_init(uint8 u8_port,uint8 u8_pin)
{
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	c8 2f       	mov	r28, r24
     412:	d6 2f       	mov	r29, r22
	enu_error_state_t enu_error_state = VALID_OPERATION;
	enu_error_state = DIO_pinMode(u8_port,u8_pin,PIN_OUTPUT);
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	0e 94 21 02 	call	0x442	; 0x442 <DIO_pinMode>
	if(enu_error_state == VALID_OPERATION)
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	29 f4       	brne	.+10     	; 0x428 <led_init+0x1c>
	{
		enu_error_state = DIO_writePin(u8_port,u8_pin,PIN_LOW);	
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	6d 2f       	mov	r22, r29
     422:	8c 2f       	mov	r24, r28
     424:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writePin>
	}
	return enu_error_state;
}
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <led_write>:

enu_error_state_t led_write(uint8 u8_port,uint8 u8_pin,enu_pin_value_t enu_led_state)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
	
	enu_error_state = DIO_writePin(u8_port,u8_pin,enu_led_state);
     42e:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writePin>

	return enu_error_state;
}
     432:	08 95       	ret

00000434 <main>:
#include "APP/app.h"


int main(void)
{
    app_init();
     434:	0e 94 9a 00 	call	0x134	; 0x134 <app_init>
	
	app_start();
     438:	0e 94 cd 00 	call	0x19a	; 0x19a <app_start>
	
	return 0;
}
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	08 95       	ret

00000442 <DIO_pinMode>:
/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     442:	84 30       	cpi	r24, 0x04	; 4
     444:	08 f0       	brcs	.+2      	; 0x448 <DIO_pinMode+0x6>
     446:	7b c0       	rjmp	.+246    	; 0x53e <DIO_pinMode+0xfc>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
     448:	68 30       	cpi	r22, 0x08	; 8
     44a:	08 f0       	brcs	.+2      	; 0x44e <DIO_pinMode+0xc>
     44c:	7a c0       	rjmp	.+244    	; 0x542 <DIO_pinMode+0x100>
		{
			if((enu_pin_direction == PIN_INPUT) || (enu_pin_direction == PIN_OUTPUT))
     44e:	42 30       	cpi	r20, 0x02	; 2
     450:	08 f0       	brcs	.+2      	; 0x454 <DIO_pinMode+0x12>
     452:	79 c0       	rjmp	.+242    	; 0x546 <DIO_pinMode+0x104>
			{
				switch(port)
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	11 f1       	breq	.+68     	; 0x49c <DIO_pinMode+0x5a>
     458:	30 f0       	brcs	.+12     	; 0x466 <DIO_pinMode+0x24>
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	d1 f1       	breq	.+116    	; 0x4d2 <DIO_pinMode+0x90>
     45e:	83 30       	cpi	r24, 0x03	; 3
     460:	09 f4       	brne	.+2      	; 0x464 <DIO_pinMode+0x22>
     462:	52 c0       	rjmp	.+164    	; 0x508 <DIO_pinMode+0xc6>
     464:	72 c0       	rjmp	.+228    	; 0x54a <DIO_pinMode+0x108>
				{
					case PORTA_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     466:	41 30       	cpi	r20, 0x01	; 1
     468:	61 f4       	brne	.+24     	; 0x482 <DIO_pinMode+0x40>
					{
						SET_BIT(DDRA,pin);
     46a:	2a b3       	in	r18, 0x1a	; 26
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_pinMode+0x34>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_pinMode+0x30>
     47a:	82 2b       	or	r24, r18
     47c:	8a bb       	out	0x1a, r24	; 26

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	08 95       	ret
					{
						SET_BIT(DDRA,pin);
					}
					else
					{
						CLEAR_BIT(DDRA,pin);
     482:	2a b3       	in	r18, 0x1a	; 26
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_pinMode+0x4c>
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	6a 95       	dec	r22
     490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_pinMode+0x48>
     492:	80 95       	com	r24
     494:	82 23       	and	r24, r18
     496:	8a bb       	out	0x1a, r24	; 26

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	08 95       	ret
					{
						CLEAR_BIT(DDRA,pin);
					}
					break;
					case PORTB_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     49c:	41 30       	cpi	r20, 0x01	; 1
     49e:	61 f4       	brne	.+24     	; 0x4b8 <DIO_pinMode+0x76>
					{
						SET_BIT(DDRB,pin);
     4a0:	27 b3       	in	r18, 0x17	; 23
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_pinMode+0x6a>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	6a 95       	dec	r22
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_pinMode+0x66>
     4b0:	82 2b       	or	r24, r18
     4b2:	87 bb       	out	0x17, r24	; 23

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	08 95       	ret
					{
						SET_BIT(DDRB,pin);
					}
					else
					{
						CLEAR_BIT(DDRB,pin);
     4b8:	27 b3       	in	r18, 0x17	; 23
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_pinMode+0x82>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_pinMode+0x7e>
     4c8:	80 95       	com	r24
     4ca:	82 23       	and	r24, r18
     4cc:	87 bb       	out	0x17, r24	; 23

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	08 95       	ret
					{
						CLEAR_BIT(DDRB,pin);
					}
					break;
					case PORTC_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     4d2:	41 30       	cpi	r20, 0x01	; 1
     4d4:	61 f4       	brne	.+24     	; 0x4ee <DIO_pinMode+0xac>
					{
						SET_BIT(DDRC,pin);
     4d6:	24 b3       	in	r18, 0x14	; 20
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_pinMode+0xa0>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	6a 95       	dec	r22
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_pinMode+0x9c>
     4e6:	82 2b       	or	r24, r18
     4e8:	84 bb       	out	0x14, r24	; 20

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	08 95       	ret
					{
						SET_BIT(DDRC,pin);
					}
					else
					{
						CLEAR_BIT(DDRC,pin);
     4ee:	24 b3       	in	r18, 0x14	; 20
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_pinMode+0xb8>
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	6a 95       	dec	r22
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_pinMode+0xb4>
     4fe:	80 95       	com	r24
     500:	82 23       	and	r24, r18
     502:	84 bb       	out	0x14, r24	; 20

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	08 95       	ret
					{
						CLEAR_BIT(DDRC,pin);
					}
					break;
					case PORTD_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     508:	41 30       	cpi	r20, 0x01	; 1
     50a:	61 f4       	brne	.+24     	; 0x524 <DIO_pinMode+0xe2>
					{
						SET_BIT(DDRD,pin);
     50c:	21 b3       	in	r18, 0x11	; 17
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_pinMode+0xd6>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	6a 95       	dec	r22
     51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_pinMode+0xd2>
     51c:	82 2b       	or	r24, r18
     51e:	81 bb       	out	0x11, r24	; 17

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	08 95       	ret
					{
						SET_BIT(DDRD,pin);
					}
					else
					{
						CLEAR_BIT(DDRD,pin);
     524:	21 b3       	in	r18, 0x11	; 17
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_pinMode+0xee>
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	6a 95       	dec	r22
     532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_pinMode+0xea>
     534:	80 95       	com	r24
     536:	82 23       	and	r24, r18
     538:	81 bb       	out	0x11, r24	; 17

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	08 95       	ret
			enu_error_state = INVALID_PIN_ID;
		}
	}
	else
	{
		enu_error_state = INVALID_PORT_ID;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 95       	ret
				enu_error_state = INVALID_DIRECTION;
			}
		}
		else
		{
			enu_error_state = INVALID_PIN_ID;
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	08 95       	ret
					break;
				}
			}
			else
			{
				enu_error_state = INVALID_DIRECTION;
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	08 95       	ret

/*============= FUNCTION DEFINITIONS =============*/

enu_error_state_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     54a:	81 e0       	ldi	r24, 0x01	; 1
	{
		enu_error_state = INVALID_PORT_ID;
	}
	return enu_error_state;
	
}
     54c:	08 95       	ret

0000054e <DIO_writePin>:

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     54e:	84 30       	cpi	r24, 0x04	; 4
     550:	08 f0       	brcs	.+2      	; 0x554 <DIO_writePin+0x6>
     552:	7b c0       	rjmp	.+246    	; 0x64a <DIO_writePin+0xfc>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
     554:	68 30       	cpi	r22, 0x08	; 8
     556:	08 f0       	brcs	.+2      	; 0x55a <DIO_writePin+0xc>
     558:	7a c0       	rjmp	.+244    	; 0x64e <DIO_writePin+0x100>
		{
			if((enu_pin_value == PIN_LOW) || (enu_pin_value == PIN_HIGH))
     55a:	42 30       	cpi	r20, 0x02	; 2
     55c:	08 f0       	brcs	.+2      	; 0x560 <DIO_writePin+0x12>
     55e:	79 c0       	rjmp	.+242    	; 0x652 <DIO_writePin+0x104>
			{
				switch(port)
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	11 f1       	breq	.+68     	; 0x5a8 <DIO_writePin+0x5a>
     564:	30 f0       	brcs	.+12     	; 0x572 <DIO_writePin+0x24>
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	d1 f1       	breq	.+116    	; 0x5de <DIO_writePin+0x90>
     56a:	83 30       	cpi	r24, 0x03	; 3
     56c:	09 f4       	brne	.+2      	; 0x570 <DIO_writePin+0x22>
     56e:	52 c0       	rjmp	.+164    	; 0x614 <DIO_writePin+0xc6>
     570:	72 c0       	rjmp	.+228    	; 0x656 <DIO_writePin+0x108>
				{
					case PORTA_ID:
					if(enu_pin_value == LOGIC_HIGH)
     572:	41 30       	cpi	r20, 0x01	; 1
     574:	61 f4       	brne	.+24     	; 0x58e <DIO_writePin+0x40>
					{
						SET_BIT(PORTA,pin);
     576:	2b b3       	in	r18, 0x1b	; 27
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_writePin+0x34>
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	6a 95       	dec	r22
     584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_writePin+0x30>
     586:	82 2b       	or	r24, r18
     588:	8b bb       	out	0x1b, r24	; 27
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	08 95       	ret
					{
						SET_BIT(PORTA,pin);
					}
					else
					{
						CLEAR_BIT(PORTA,pin);
     58e:	2b b3       	in	r18, 0x1b	; 27
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_writePin+0x4c>
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	6a 95       	dec	r22
     59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_writePin+0x48>
     59e:	80 95       	com	r24
     5a0:	82 23       	and	r24, r18
     5a2:	8b bb       	out	0x1b, r24	; 27
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	08 95       	ret
					{
						CLEAR_BIT(PORTA,pin);
					}
					break;
					case PORTB_ID:
					if(enu_pin_value == LOGIC_HIGH)
     5a8:	41 30       	cpi	r20, 0x01	; 1
     5aa:	61 f4       	brne	.+24     	; 0x5c4 <DIO_writePin+0x76>
					{
						SET_BIT(PORTB,pin);
     5ac:	28 b3       	in	r18, 0x18	; 24
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_writePin+0x6a>
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	6a 95       	dec	r22
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_writePin+0x66>
     5bc:	82 2b       	or	r24, r18
     5be:	88 bb       	out	0x18, r24	; 24
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	08 95       	ret
					{
						SET_BIT(PORTB,pin);
					}
					else
					{
						CLEAR_BIT(PORTB,pin);
     5c4:	28 b3       	in	r18, 0x18	; 24
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_writePin+0x82>
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	6a 95       	dec	r22
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_writePin+0x7e>
     5d4:	80 95       	com	r24
     5d6:	82 23       	and	r24, r18
     5d8:	88 bb       	out	0x18, r24	; 24
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret
					{
						CLEAR_BIT(PORTB,pin);
					}
					break;
					case PORTC_ID:
					if(enu_pin_value == LOGIC_HIGH)
     5de:	41 30       	cpi	r20, 0x01	; 1
     5e0:	61 f4       	brne	.+24     	; 0x5fa <DIO_writePin+0xac>
					{
						SET_BIT(PORTC,pin);
     5e2:	25 b3       	in	r18, 0x15	; 21
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_writePin+0xa0>
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	6a 95       	dec	r22
     5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_writePin+0x9c>
     5f2:	82 2b       	or	r24, r18
     5f4:	85 bb       	out	0x15, r24	; 21
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	08 95       	ret
					{
						SET_BIT(PORTC,pin);
					}
					else
					{
						CLEAR_BIT(PORTC,pin);
     5fa:	25 b3       	in	r18, 0x15	; 21
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_writePin+0xb8>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	6a 95       	dec	r22
     608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_writePin+0xb4>
     60a:	80 95       	com	r24
     60c:	82 23       	and	r24, r18
     60e:	85 bb       	out	0x15, r24	; 21
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	08 95       	ret
					{
						CLEAR_BIT(PORTC,pin);
					}
					break;
					case PORTD_ID:
					if(enu_pin_value == LOGIC_HIGH)
     614:	41 30       	cpi	r20, 0x01	; 1
     616:	61 f4       	brne	.+24     	; 0x630 <DIO_writePin+0xe2>
					{
						SET_BIT(PORTD,pin);
     618:	22 b3       	in	r18, 0x12	; 18
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_writePin+0xd6>
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	6a 95       	dec	r22
     626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_writePin+0xd2>
     628:	82 2b       	or	r24, r18
     62a:	82 bb       	out	0x12, r24	; 18
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	08 95       	ret
					{
						SET_BIT(PORTD,pin);
					}
					else
					{
						CLEAR_BIT(PORTD,pin);
     630:	22 b3       	in	r18, 0x12	; 18
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_writePin+0xee>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_writePin+0xea>
     640:	80 95       	com	r24
     642:	82 23       	and	r24, r18
     644:	82 bb       	out	0x12, r24	; 18
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	08 95       	ret
			enu_error_state = INVALID_PIN_ID;
		}
	}
	else
	{
		enu_error_state = INVALID_PORT_ID;
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	08 95       	ret
				enu_error_state = INVALID_OPERATION;
			}
		}
		else
		{
			enu_error_state = INVALID_PIN_ID;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	08 95       	ret
					break;
				}
			}
			else
			{
				enu_error_state = INVALID_OPERATION;
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	08 95       	ret
	
}

enu_error_state_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_error_state_t enu_error_state = VALID_OPERATION;
     656:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_error_state = INVALID_PORT_ID;
	}
	return enu_error_state;
}
     658:	08 95       	ret

0000065a <INT_init>:
		break;
	case EN_INT2:
		CLEAR_BIT(GICR,INT2);			// Disable external interrupt pin INT2
		break;
	}
	SET_BIT(SREG,PIN7);       			// Enable interrupts by setting I-bit
     65a:	fc 01       	movw	r30, r24
     65c:	9f b7       	in	r25, 0x3f	; 63
     65e:	9f 77       	andi	r25, 0x7F	; 127
     660:	9f bf       	out	0x3f, r25	; 63
     662:	90 81       	ld	r25, Z
     664:	91 30       	cpi	r25, 0x01	; 1
     666:	81 f1       	breq	.+96     	; 0x6c8 <INT_init+0x6e>
     668:	20 f0       	brcs	.+8      	; 0x672 <INT_init+0x18>
     66a:	92 30       	cpi	r25, 0x02	; 2
     66c:	09 f4       	brne	.+2      	; 0x670 <INT_init+0x16>
     66e:	57 c0       	rjmp	.+174    	; 0x71e <INT_init+0xc4>
     670:	69 c0       	rjmp	.+210    	; 0x744 <INT_init+0xea>
     672:	81 b3       	in	r24, 0x11	; 17
     674:	8b 7f       	andi	r24, 0xFB	; 251
     676:	81 bb       	out	0x11, r24	; 17
     678:	8b b7       	in	r24, 0x3b	; 59
     67a:	80 64       	ori	r24, 0x40	; 64
     67c:	8b bf       	out	0x3b, r24	; 59
     67e:	81 81       	ldd	r24, Z+1	; 0x01
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	69 f0       	breq	.+26     	; 0x69e <INT_init+0x44>
     684:	28 f0       	brcs	.+10     	; 0x690 <INT_init+0x36>
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	89 f0       	breq	.+34     	; 0x6ac <INT_init+0x52>
     68a:	83 30       	cpi	r24, 0x03	; 3
     68c:	b1 f0       	breq	.+44     	; 0x6ba <INT_init+0x60>
     68e:	5a c0       	rjmp	.+180    	; 0x744 <INT_init+0xea>
     690:	85 b7       	in	r24, 0x35	; 53
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	85 bf       	out	0x35, r24	; 53
     696:	85 b7       	in	r24, 0x35	; 53
     698:	8d 7f       	andi	r24, 0xFD	; 253
     69a:	85 bf       	out	0x35, r24	; 53
     69c:	53 c0       	rjmp	.+166    	; 0x744 <INT_init+0xea>
     69e:	85 b7       	in	r24, 0x35	; 53
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	85 bf       	out	0x35, r24	; 53
     6a4:	85 b7       	in	r24, 0x35	; 53
     6a6:	8d 7f       	andi	r24, 0xFD	; 253
     6a8:	85 bf       	out	0x35, r24	; 53
     6aa:	4c c0       	rjmp	.+152    	; 0x744 <INT_init+0xea>
     6ac:	85 b7       	in	r24, 0x35	; 53
     6ae:	8e 7f       	andi	r24, 0xFE	; 254
     6b0:	85 bf       	out	0x35, r24	; 53
     6b2:	85 b7       	in	r24, 0x35	; 53
     6b4:	82 60       	ori	r24, 0x02	; 2
     6b6:	85 bf       	out	0x35, r24	; 53
     6b8:	45 c0       	rjmp	.+138    	; 0x744 <INT_init+0xea>
     6ba:	85 b7       	in	r24, 0x35	; 53
     6bc:	81 60       	ori	r24, 0x01	; 1
     6be:	85 bf       	out	0x35, r24	; 53
     6c0:	85 b7       	in	r24, 0x35	; 53
     6c2:	82 60       	ori	r24, 0x02	; 2
     6c4:	85 bf       	out	0x35, r24	; 53
     6c6:	3e c0       	rjmp	.+124    	; 0x744 <INT_init+0xea>
     6c8:	81 b3       	in	r24, 0x11	; 17
     6ca:	87 7f       	andi	r24, 0xF7	; 247
     6cc:	81 bb       	out	0x11, r24	; 17
     6ce:	8b b7       	in	r24, 0x3b	; 59
     6d0:	80 68       	ori	r24, 0x80	; 128
     6d2:	8b bf       	out	0x3b, r24	; 59
     6d4:	81 81       	ldd	r24, Z+1	; 0x01
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	69 f0       	breq	.+26     	; 0x6f4 <INT_init+0x9a>
     6da:	28 f0       	brcs	.+10     	; 0x6e6 <INT_init+0x8c>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	89 f0       	breq	.+34     	; 0x702 <INT_init+0xa8>
     6e0:	83 30       	cpi	r24, 0x03	; 3
     6e2:	b1 f0       	breq	.+44     	; 0x710 <INT_init+0xb6>
     6e4:	2f c0       	rjmp	.+94     	; 0x744 <INT_init+0xea>
     6e6:	85 b7       	in	r24, 0x35	; 53
     6e8:	8b 7f       	andi	r24, 0xFB	; 251
     6ea:	85 bf       	out	0x35, r24	; 53
     6ec:	85 b7       	in	r24, 0x35	; 53
     6ee:	87 7f       	andi	r24, 0xF7	; 247
     6f0:	85 bf       	out	0x35, r24	; 53
     6f2:	28 c0       	rjmp	.+80     	; 0x744 <INT_init+0xea>
     6f4:	85 b7       	in	r24, 0x35	; 53
     6f6:	84 60       	ori	r24, 0x04	; 4
     6f8:	85 bf       	out	0x35, r24	; 53
     6fa:	85 b7       	in	r24, 0x35	; 53
     6fc:	87 7f       	andi	r24, 0xF7	; 247
     6fe:	85 bf       	out	0x35, r24	; 53
     700:	21 c0       	rjmp	.+66     	; 0x744 <INT_init+0xea>
     702:	85 b7       	in	r24, 0x35	; 53
     704:	8b 7f       	andi	r24, 0xFB	; 251
     706:	85 bf       	out	0x35, r24	; 53
     708:	85 b7       	in	r24, 0x35	; 53
     70a:	88 60       	ori	r24, 0x08	; 8
     70c:	85 bf       	out	0x35, r24	; 53
     70e:	1a c0       	rjmp	.+52     	; 0x744 <INT_init+0xea>
     710:	85 b7       	in	r24, 0x35	; 53
     712:	84 60       	ori	r24, 0x04	; 4
     714:	85 bf       	out	0x35, r24	; 53
     716:	85 b7       	in	r24, 0x35	; 53
     718:	88 60       	ori	r24, 0x08	; 8
     71a:	85 bf       	out	0x35, r24	; 53
     71c:	13 c0       	rjmp	.+38     	; 0x744 <INT_init+0xea>
     71e:	87 b3       	in	r24, 0x17	; 23
     720:	87 7f       	andi	r24, 0xF7	; 247
     722:	87 bb       	out	0x17, r24	; 23
     724:	8b b7       	in	r24, 0x3b	; 59
     726:	80 62       	ori	r24, 0x20	; 32
     728:	8b bf       	out	0x3b, r24	; 59
     72a:	81 81       	ldd	r24, Z+1	; 0x01
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	19 f0       	breq	.+6      	; 0x736 <INT_init+0xdc>
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	29 f0       	breq	.+10     	; 0x73e <INT_init+0xe4>
     734:	07 c0       	rjmp	.+14     	; 0x744 <INT_init+0xea>
     736:	84 b7       	in	r24, 0x34	; 52
     738:	8f 7b       	andi	r24, 0xBF	; 191
     73a:	84 bf       	out	0x34, r24	; 52
     73c:	03 c0       	rjmp	.+6      	; 0x744 <INT_init+0xea>
     73e:	84 b7       	in	r24, 0x34	; 52
     740:	80 64       	ori	r24, 0x40	; 64
     742:	84 bf       	out	0x34, r24	; 52
     744:	8f b7       	in	r24, 0x3f	; 63
     746:	80 68       	ori	r24, 0x80	; 128
     748:	8f bf       	out	0x3f, r24	; 63
     74a:	08 95       	ret

0000074c <INT0_setCallBack>:
     74c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <g_callBackPtr_0+0x1>
     750:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <g_callBackPtr_0>
     754:	08 95       	ret

00000756 <INT1_setCallBack>:
     756:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <g_callBackPtr_1+0x1>
     75a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <g_callBackPtr_1>
     75e:	08 95       	ret

00000760 <__vector_1>:
}

ISR_HANDLER(EXT_INT0)
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
	if(g_callBackPtr_0 != NULL_PTR)
     782:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <g_callBackPtr_0>
     786:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <g_callBackPtr_0+0x1>
     78a:	30 97       	sbiw	r30, 0x00	; 0
     78c:	09 f0       	breq	.+2      	; 0x790 <__vector_1+0x30>
		{
			g_callBackPtr_0();
     78e:	09 95       	icall
		}
}
     790:	ff 91       	pop	r31
     792:	ef 91       	pop	r30
     794:	bf 91       	pop	r27
     796:	af 91       	pop	r26
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	7f 91       	pop	r23
     79e:	6f 91       	pop	r22
     7a0:	5f 91       	pop	r21
     7a2:	4f 91       	pop	r20
     7a4:	3f 91       	pop	r19
     7a6:	2f 91       	pop	r18
     7a8:	0f 90       	pop	r0
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	0f 90       	pop	r0
     7ae:	1f 90       	pop	r1
     7b0:	18 95       	reti

000007b2 <__vector_2>:


ISR_HANDLER(EXT_INT1)
{
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
	if(g_callBackPtr_1 != NULL_PTR)
     7d4:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <g_callBackPtr_1>
     7d8:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <g_callBackPtr_1+0x1>
     7dc:	30 97       	sbiw	r30, 0x00	; 0
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_2+0x30>
		{
			g_callBackPtr_1();
     7e0:	09 95       	icall
		}
}
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	1f 90       	pop	r1
     802:	18 95       	reti

00000804 <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	2f 93       	push	r18
     810:	3f 93       	push	r19
     812:	4f 93       	push	r20
     814:	5f 93       	push	r21
     816:	6f 93       	push	r22
     818:	7f 93       	push	r23
     81a:	8f 93       	push	r24
     81c:	9f 93       	push	r25
     81e:	af 93       	push	r26
     820:	bf 93       	push	r27
     822:	ef 93       	push	r30
     824:	ff 93       	push	r31
	if(g_callBackPtr_2 != NULL_PTR)
     826:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <g_callBackPtr_2>
     82a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <g_callBackPtr_2+0x1>
     82e:	30 97       	sbiw	r30, 0x00	; 0
     830:	09 f0       	breq	.+2      	; 0x834 <__vector_3+0x30>
		{
			g_callBackPtr_2();
     832:	09 95       	icall
		}
}
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	bf 91       	pop	r27
     83a:	af 91       	pop	r26
     83c:	9f 91       	pop	r25
     83e:	8f 91       	pop	r24
     840:	7f 91       	pop	r23
     842:	6f 91       	pop	r22
     844:	5f 91       	pop	r21
     846:	4f 91       	pop	r20
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	0f 90       	pop	r0
     852:	1f 90       	pop	r1
     854:	18 95       	reti

00000856 <calc_prescaler>:
	TCNT0 = 0;
	OCR0 = gl_initial_value;
	TIMSK |= (1<<OCIE0);				//enable timer compare match interrupt
	g_timeout_flag = FALSE;				//set flag to default
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
}
     856:	cf 92       	push	r12
     858:	df 92       	push	r13
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	6b 01       	movw	r12, r22
     864:	7c 01       	movw	r14, r24
     866:	ea 01       	movw	r28, r20
     868:	2f e6       	ldi	r18, 0x6F	; 111
     86a:	32 e1       	ldi	r19, 0x12	; 18
     86c:	43 e0       	ldi	r20, 0x03	; 3
     86e:	52 e4       	ldi	r21, 0x42	; 66
     870:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     874:	18 16       	cp	r1, r24
     876:	0c f4       	brge	.+2      	; 0x87a <__stack+0x1b>
     878:	53 c0       	rjmp	.+166    	; 0x920 <__stack+0xc1>
     87a:	2f e6       	ldi	r18, 0x6F	; 111
     87c:	32 e1       	ldi	r19, 0x12	; 18
     87e:	43 e0       	ldi	r20, 0x03	; 3
     880:	5d e3       	ldi	r21, 0x3D	; 61
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     88a:	18 16       	cp	r1, r24
     88c:	2c f0       	brlt	.+10     	; 0x898 <__stack+0x39>
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	99 83       	std	Y+1, r25	; 0x01
     894:	88 83       	st	Y, r24
     896:	45 c0       	rjmp	.+138    	; 0x922 <__stack+0xc3>
     898:	2f e6       	ldi	r18, 0x6F	; 111
     89a:	32 e1       	ldi	r19, 0x12	; 18
     89c:	43 e8       	ldi	r20, 0x83	; 131
     89e:	5e e3       	ldi	r21, 0x3E	; 62
     8a0:	c7 01       	movw	r24, r14
     8a2:	b6 01       	movw	r22, r12
     8a4:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     8a8:	18 16       	cp	r1, r24
     8aa:	34 f0       	brlt	.+12     	; 0x8b8 <__stack+0x59>
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	99 83       	std	Y+1, r25	; 0x01
     8b2:	88 83       	st	Y, r24
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	35 c0       	rjmp	.+106    	; 0x922 <__stack+0xc3>
     8b8:	2f e6       	ldi	r18, 0x6F	; 111
     8ba:	32 e1       	ldi	r19, 0x12	; 18
     8bc:	43 e0       	ldi	r20, 0x03	; 3
     8be:	50 e4       	ldi	r21, 0x40	; 64
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     8c8:	18 16       	cp	r1, r24
     8ca:	34 f0       	brlt	.+12     	; 0x8d8 <__stack+0x79>
     8cc:	80 e4       	ldi	r24, 0x40	; 64
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	99 83       	std	Y+1, r25	; 0x01
     8d2:	88 83       	st	Y, r24
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	25 c0       	rjmp	.+74     	; 0x922 <__stack+0xc3>
     8d8:	2f e6       	ldi	r18, 0x6F	; 111
     8da:	32 e1       	ldi	r19, 0x12	; 18
     8dc:	43 e0       	ldi	r20, 0x03	; 3
     8de:	51 e4       	ldi	r21, 0x41	; 65
     8e0:	c7 01       	movw	r24, r14
     8e2:	b6 01       	movw	r22, r12
     8e4:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	34 f0       	brlt	.+12     	; 0x8f8 <__stack+0x99>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	99 83       	std	Y+1, r25	; 0x01
     8f2:	88 83       	st	Y, r24
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	15 c0       	rjmp	.+42     	; 0x922 <__stack+0xc3>
     8f8:	2f e6       	ldi	r18, 0x6F	; 111
     8fa:	32 e1       	ldi	r19, 0x12	; 18
     8fc:	43 e0       	ldi	r20, 0x03	; 3
     8fe:	52 e4       	ldi	r21, 0x42	; 66
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     908:	18 16       	cp	r1, r24
     90a:	34 f0       	brlt	.+12     	; 0x918 <__stack+0xb9>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	99 83       	std	Y+1, r25	; 0x01
     912:	88 83       	st	Y, r24
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	05 c0       	rjmp	.+10     	; 0x922 <__stack+0xc3>
     918:	19 82       	std	Y+1, r1	; 0x01
     91a:	18 82       	st	Y, r1
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	01 c0       	rjmp	.+2      	; 0x922 <__stack+0xc3>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	df 90       	pop	r13
     92c:	cf 90       	pop	r12
     92e:	08 95       	ret

00000930 <calc_initialValue>:
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	eb 01       	movw	r28, r22
     936:	80 34       	cpi	r24, 0x40	; 64
     938:	91 05       	cpc	r25, r1
     93a:	81 f1       	breq	.+96     	; 0x99c <calc_initialValue+0x6c>
     93c:	30 f4       	brcc	.+12     	; 0x94a <calc_initialValue+0x1a>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	91 05       	cpc	r25, r1
     942:	61 f0       	breq	.+24     	; 0x95c <calc_initialValue+0x2c>
     944:	08 97       	sbiw	r24, 0x08	; 8
     946:	d1 f0       	breq	.+52     	; 0x97c <calc_initialValue+0x4c>
     948:	59 c0       	rjmp	.+178    	; 0x9fc <calc_initialValue+0xcc>
     94a:	81 15       	cp	r24, r1
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	96 07       	cpc	r25, r22
     950:	a9 f1       	breq	.+106    	; 0x9bc <calc_initialValue+0x8c>
     952:	81 15       	cp	r24, r1
     954:	94 40       	sbci	r25, 0x04	; 4
     956:	09 f4       	brne	.+2      	; 0x95a <calc_initialValue+0x2a>
     958:	41 c0       	rjmp	.+130    	; 0x9dc <calc_initialValue+0xac>
     95a:	50 c0       	rjmp	.+160    	; 0x9fc <calc_initialValue+0xcc>
     95c:	6f e6       	ldi	r22, 0x6F	; 111
     95e:	72 e1       	ldi	r23, 0x12	; 18
     960:	83 e0       	ldi	r24, 0x03	; 3
     962:	9d e3       	ldi	r25, 0x3D	; 61
     964:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     968:	2f e6       	ldi	r18, 0x6F	; 111
     96a:	32 e1       	ldi	r19, 0x12	; 18
     96c:	43 e0       	ldi	r20, 0x03	; 3
     96e:	59 e3       	ldi	r21, 0x39	; 57
     970:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     974:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     978:	68 83       	st	Y, r22
     97a:	41 c0       	rjmp	.+130    	; 0x9fe <calc_initialValue+0xce>
     97c:	6f e6       	ldi	r22, 0x6F	; 111
     97e:	72 e1       	ldi	r23, 0x12	; 18
     980:	83 e8       	ldi	r24, 0x83	; 131
     982:	9e e3       	ldi	r25, 0x3E	; 62
     984:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     988:	2f e6       	ldi	r18, 0x6F	; 111
     98a:	32 e1       	ldi	r19, 0x12	; 18
     98c:	43 e8       	ldi	r20, 0x83	; 131
     98e:	5a e3       	ldi	r21, 0x3A	; 58
     990:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     994:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     998:	68 83       	st	Y, r22
     99a:	31 c0       	rjmp	.+98     	; 0x9fe <calc_initialValue+0xce>
     99c:	6f e6       	ldi	r22, 0x6F	; 111
     99e:	72 e1       	ldi	r23, 0x12	; 18
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	90 e4       	ldi	r25, 0x40	; 64
     9a4:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     9a8:	2f e6       	ldi	r18, 0x6F	; 111
     9aa:	32 e1       	ldi	r19, 0x12	; 18
     9ac:	43 e0       	ldi	r20, 0x03	; 3
     9ae:	5c e3       	ldi	r21, 0x3C	; 60
     9b0:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     9b4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     9b8:	68 83       	st	Y, r22
     9ba:	21 c0       	rjmp	.+66     	; 0x9fe <calc_initialValue+0xce>
     9bc:	6f e6       	ldi	r22, 0x6F	; 111
     9be:	72 e1       	ldi	r23, 0x12	; 18
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	91 e4       	ldi	r25, 0x41	; 65
     9c4:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     9c8:	2f e6       	ldi	r18, 0x6F	; 111
     9ca:	32 e1       	ldi	r19, 0x12	; 18
     9cc:	43 e0       	ldi	r20, 0x03	; 3
     9ce:	5d e3       	ldi	r21, 0x3D	; 61
     9d0:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     9d4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     9d8:	68 83       	st	Y, r22
     9da:	11 c0       	rjmp	.+34     	; 0x9fe <calc_initialValue+0xce>
     9dc:	6f e6       	ldi	r22, 0x6F	; 111
     9de:	72 e1       	ldi	r23, 0x12	; 18
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	92 e4       	ldi	r25, 0x42	; 66
     9e4:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     9e8:	2f e6       	ldi	r18, 0x6F	; 111
     9ea:	32 e1       	ldi	r19, 0x12	; 18
     9ec:	43 e0       	ldi	r20, 0x03	; 3
     9ee:	5e e3       	ldi	r21, 0x3E	; 62
     9f0:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     9f4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     9f8:	68 83       	st	Y, r22
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <calc_initialValue+0xce>
     9fc:	18 82       	st	Y, r1
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <set_prescale>:
     a04:	80 34       	cpi	r24, 0x40	; 64
     a06:	91 05       	cpc	r25, r1
     a08:	a9 f0       	breq	.+42     	; 0xa34 <set_prescale+0x30>
     a0a:	30 f4       	brcc	.+12     	; 0xa18 <set_prescale+0x14>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	91 05       	cpc	r25, r1
     a10:	59 f0       	breq	.+22     	; 0xa28 <set_prescale+0x24>
     a12:	08 97       	sbiw	r24, 0x08	; 8
     a14:	61 f0       	breq	.+24     	; 0xa2e <set_prescale+0x2a>
     a16:	17 c0       	rjmp	.+46     	; 0xa46 <set_prescale+0x42>
     a18:	81 15       	cp	r24, r1
     a1a:	21 e0       	ldi	r18, 0x01	; 1
     a1c:	92 07       	cpc	r25, r18
     a1e:	69 f0       	breq	.+26     	; 0xa3a <set_prescale+0x36>
     a20:	81 15       	cp	r24, r1
     a22:	94 40       	sbci	r25, 0x04	; 4
     a24:	69 f0       	breq	.+26     	; 0xa40 <set_prescale+0x3c>
     a26:	0f c0       	rjmp	.+30     	; 0xa46 <set_prescale+0x42>
     a28:	81 e8       	ldi	r24, 0x81	; 129
     a2a:	83 bf       	out	0x33, r24	; 51
     a2c:	08 95       	ret
     a2e:	82 e8       	ldi	r24, 0x82	; 130
     a30:	83 bf       	out	0x33, r24	; 51
     a32:	08 95       	ret
     a34:	83 e8       	ldi	r24, 0x83	; 131
     a36:	83 bf       	out	0x33, r24	; 51
     a38:	08 95       	ret
     a3a:	84 e8       	ldi	r24, 0x84	; 132
     a3c:	83 bf       	out	0x33, r24	; 51
     a3e:	08 95       	ret
     a40:	85 e8       	ldi	r24, 0x85	; 133
     a42:	83 bf       	out	0x33, r24	; 51
     a44:	08 95       	ret
     a46:	13 be       	out	0x33, r1	; 51
     a48:	08 95       	ret

00000a4a <tmr_delay_ms>:
     a4a:	8f 92       	push	r8
     a4c:	9f 92       	push	r9
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	27 97       	sbiw	r28, 0x07	; 7
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	6b 01       	movw	r12, r22
     a72:	7c 01       	movw	r14, r24
     a74:	ae 01       	movw	r20, r28
     a76:	4e 5f       	subi	r20, 0xFE	; 254
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	0e 94 2b 04 	call	0x856	; 0x856 <calc_prescaler>
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	71 f4       	brne	.+28     	; 0xa9e <tmr_delay_ms+0x54>
     a82:	a7 01       	movw	r20, r14
     a84:	96 01       	movw	r18, r12
     a86:	be 01       	movw	r22, r28
     a88:	6f 5f       	subi	r22, 0xFF	; 255
     a8a:	7f 4f       	sbci	r23, 0xFF	; 255
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	9b 81       	ldd	r25, Y+3	; 0x03
     a90:	0e 94 98 04 	call	0x930	; 0x930 <calc_initialValue>
     a94:	1c 82       	std	Y+4, r1	; 0x04
     a96:	1d 82       	std	Y+5, r1	; 0x05
     a98:	1e 82       	std	Y+6, r1	; 0x06
     a9a:	1f 82       	std	Y+7, r1	; 0x07
     a9c:	11 c0       	rjmp	.+34     	; 0xac0 <tmr_delay_ms+0x76>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	94 e0       	ldi	r25, 0x04	; 4
     aa2:	9b 83       	std	Y+3, r25	; 0x03
     aa4:	8a 83       	std	Y+2, r24	; 0x02
     aa6:	2f e6       	ldi	r18, 0x6F	; 111
     aa8:	32 e1       	ldi	r19, 0x12	; 18
     aaa:	43 e0       	ldi	r20, 0x03	; 3
     aac:	52 e4       	ldi	r21, 0x42	; 66
     aae:	c7 01       	movw	r24, r14
     ab0:	b6 01       	movw	r22, r12
     ab2:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     ab6:	6c 83       	std	Y+4, r22	; 0x04
     ab8:	7d 83       	std	Y+5, r23	; 0x05
     aba:	8e 83       	std	Y+6, r24	; 0x06
     abc:	9f 83       	std	Y+7, r25	; 0x07
     abe:	19 82       	std	Y+1, r1	; 0x01
     ac0:	cc 80       	ldd	r12, Y+4	; 0x04
     ac2:	dd 80       	ldd	r13, Y+5	; 0x05
     ac4:	ee 80       	ldd	r14, Y+6	; 0x06
     ac6:	ff 80       	ldd	r15, Y+7	; 0x07
     ac8:	c7 01       	movw	r24, r14
     aca:	b6 01       	movw	r22, r12
     acc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     ad0:	16 2f       	mov	r17, r22
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c7 01       	movw	r24, r14
     ae2:	b6 01       	movw	r22, r12
     ae4:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     ae8:	2f e6       	ldi	r18, 0x6F	; 111
     aea:	32 e1       	ldi	r19, 0x12	; 18
     aec:	43 e0       	ldi	r20, 0x03	; 3
     aee:	52 e4       	ldi	r21, 0x42	; 66
     af0:	0e 94 c9 08 	call	0x1192	; 0x1192 <__mulsf3>
     af4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     af8:	f6 2e       	mov	r15, r22
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	82 bf       	out	0x32, r24	; 50
     afe:	11 11       	cpse	r17, r1
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <tmr_delay_ms+0xc8>
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	0e 94 02 05 	call	0xa04	; 0xa04 <set_prescale>
     b0a:	08 b6       	in	r0, 0x38	; 56
     b0c:	00 fe       	sbrs	r0, 0
     b0e:	fd cf       	rjmp	.-6      	; 0xb0a <tmr_delay_ms+0xc0>
     b10:	00 c1       	rjmp	.+512    	; 0xd12 <tmr_delay_ms+0x2c8>
     b12:	85 e8       	ldi	r24, 0x85	; 133
     b14:	83 bf       	out	0x33, r24	; 51
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <tmr_delay_ms+0xdc>
     b18:	08 b6       	in	r0, 0x38	; 56
     b1a:	00 fe       	sbrs	r0, 0
     b1c:	fd cf       	rjmp	.-6      	; 0xb18 <tmr_delay_ms+0xce>
     b1e:	11 50       	subi	r17, 0x01	; 1
     b20:	88 b7       	in	r24, 0x38	; 56
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	88 bf       	out	0x38, r24	; 56
     b26:	11 11       	cpse	r17, r1
     b28:	f7 cf       	rjmp	.-18     	; 0xb18 <tmr_delay_ms+0xce>
     b2a:	ff 20       	and	r15, r15
     b2c:	09 f4       	brne	.+2      	; 0xb30 <tmr_delay_ms+0xe6>
     b2e:	53 c0       	rjmp	.+166    	; 0xbd6 <tmr_delay_ms+0x18c>
     b30:	6f 2d       	mov	r22, r15
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     b3c:	4b 01       	movw	r8, r22
     b3e:	5c 01       	movw	r10, r24
     b40:	2f e6       	ldi	r18, 0x6F	; 111
     b42:	32 e1       	ldi	r19, 0x12	; 18
     b44:	43 e0       	ldi	r20, 0x03	; 3
     b46:	5d e3       	ldi	r21, 0x3D	; 61
     b48:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     b4c:	18 16       	cp	r1, r24
     b4e:	2c f0       	brlt	.+10     	; 0xb5a <tmr_delay_ms+0x110>
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	9b 83       	std	Y+3, r25	; 0x03
     b56:	8a 83       	std	Y+2, r24	; 0x02
     b58:	3e c0       	rjmp	.+124    	; 0xbd6 <tmr_delay_ms+0x18c>
     b5a:	2f e6       	ldi	r18, 0x6F	; 111
     b5c:	32 e1       	ldi	r19, 0x12	; 18
     b5e:	43 e8       	ldi	r20, 0x83	; 131
     b60:	5e e3       	ldi	r21, 0x3E	; 62
     b62:	c5 01       	movw	r24, r10
     b64:	b4 01       	movw	r22, r8
     b66:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     b6a:	18 16       	cp	r1, r24
     b6c:	2c f0       	brlt	.+10     	; 0xb78 <tmr_delay_ms+0x12e>
     b6e:	88 e0       	ldi	r24, 0x08	; 8
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	9b 83       	std	Y+3, r25	; 0x03
     b74:	8a 83       	std	Y+2, r24	; 0x02
     b76:	2f c0       	rjmp	.+94     	; 0xbd6 <tmr_delay_ms+0x18c>
     b78:	2f e6       	ldi	r18, 0x6F	; 111
     b7a:	32 e1       	ldi	r19, 0x12	; 18
     b7c:	43 e0       	ldi	r20, 0x03	; 3
     b7e:	50 e4       	ldi	r21, 0x40	; 64
     b80:	c5 01       	movw	r24, r10
     b82:	b4 01       	movw	r22, r8
     b84:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     b88:	18 16       	cp	r1, r24
     b8a:	2c f0       	brlt	.+10     	; 0xb96 <tmr_delay_ms+0x14c>
     b8c:	80 e4       	ldi	r24, 0x40	; 64
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9b 83       	std	Y+3, r25	; 0x03
     b92:	8a 83       	std	Y+2, r24	; 0x02
     b94:	20 c0       	rjmp	.+64     	; 0xbd6 <tmr_delay_ms+0x18c>
     b96:	2f e6       	ldi	r18, 0x6F	; 111
     b98:	32 e1       	ldi	r19, 0x12	; 18
     b9a:	43 e0       	ldi	r20, 0x03	; 3
     b9c:	51 e4       	ldi	r21, 0x41	; 65
     b9e:	c5 01       	movw	r24, r10
     ba0:	b4 01       	movw	r22, r8
     ba2:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     ba6:	18 16       	cp	r1, r24
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <tmr_delay_ms+0x16a>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	9b 83       	std	Y+3, r25	; 0x03
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	11 c0       	rjmp	.+34     	; 0xbd6 <tmr_delay_ms+0x18c>
     bb4:	2f e6       	ldi	r18, 0x6F	; 111
     bb6:	32 e1       	ldi	r19, 0x12	; 18
     bb8:	43 e0       	ldi	r20, 0x03	; 3
     bba:	52 e4       	ldi	r21, 0x42	; 66
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	2c f0       	brlt	.+10     	; 0xbd2 <tmr_delay_ms+0x188>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	9b 83       	std	Y+3, r25	; 0x03
     bce:	8a 83       	std	Y+2, r24	; 0x02
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <tmr_delay_ms+0x18c>
     bd2:	1b 82       	std	Y+3, r1	; 0x03
     bd4:	1a 82       	std	Y+2, r1	; 0x02
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	80 34       	cpi	r24, 0x40	; 64
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <tmr_delay_ms+0x198>
     be0:	45 c0       	rjmp	.+138    	; 0xc6c <tmr_delay_ms+0x222>
     be2:	30 f4       	brcc	.+12     	; 0xbf0 <tmr_delay_ms+0x1a6>
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	91 05       	cpc	r25, r1
     be8:	69 f0       	breq	.+26     	; 0xc04 <tmr_delay_ms+0x1ba>
     bea:	08 97       	sbiw	r24, 0x08	; 8
     bec:	29 f1       	breq	.+74     	; 0xc38 <tmr_delay_ms+0x1ee>
     bee:	8c c0       	rjmp	.+280    	; 0xd08 <tmr_delay_ms+0x2be>
     bf0:	81 15       	cp	r24, r1
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	92 07       	cpc	r25, r18
     bf6:	09 f4       	brne	.+2      	; 0xbfa <tmr_delay_ms+0x1b0>
     bf8:	53 c0       	rjmp	.+166    	; 0xca0 <tmr_delay_ms+0x256>
     bfa:	81 15       	cp	r24, r1
     bfc:	94 40       	sbci	r25, 0x04	; 4
     bfe:	09 f4       	brne	.+2      	; 0xc02 <tmr_delay_ms+0x1b8>
     c00:	69 c0       	rjmp	.+210    	; 0xcd4 <tmr_delay_ms+0x28a>
     c02:	82 c0       	rjmp	.+260    	; 0xd08 <tmr_delay_ms+0x2be>
     c04:	6f 2d       	mov	r22, r15
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	6f e6       	ldi	r22, 0x6F	; 111
     c16:	72 e1       	ldi	r23, 0x12	; 18
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	9d e3       	ldi	r25, 0x3D	; 61
     c1c:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     c20:	2f e6       	ldi	r18, 0x6F	; 111
     c22:	32 e1       	ldi	r19, 0x12	; 18
     c24:	43 e0       	ldi	r20, 0x03	; 3
     c26:	59 e3       	ldi	r21, 0x39	; 57
     c28:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     c2c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     c30:	62 bf       	out	0x32, r22	; 50
     c32:	81 e8       	ldi	r24, 0x81	; 129
     c34:	83 bf       	out	0x33, r24	; 51
     c36:	6a c0       	rjmp	.+212    	; 0xd0c <tmr_delay_ms+0x2c2>
     c38:	6f 2d       	mov	r22, r15
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     c44:	9b 01       	movw	r18, r22
     c46:	ac 01       	movw	r20, r24
     c48:	6f e6       	ldi	r22, 0x6F	; 111
     c4a:	72 e1       	ldi	r23, 0x12	; 18
     c4c:	83 e8       	ldi	r24, 0x83	; 131
     c4e:	9e e3       	ldi	r25, 0x3E	; 62
     c50:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     c54:	2f e6       	ldi	r18, 0x6F	; 111
     c56:	32 e1       	ldi	r19, 0x12	; 18
     c58:	43 e8       	ldi	r20, 0x83	; 131
     c5a:	5a e3       	ldi	r21, 0x3A	; 58
     c5c:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     c60:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     c64:	62 bf       	out	0x32, r22	; 50
     c66:	82 e8       	ldi	r24, 0x82	; 130
     c68:	83 bf       	out	0x33, r24	; 51
     c6a:	50 c0       	rjmp	.+160    	; 0xd0c <tmr_delay_ms+0x2c2>
     c6c:	6f 2d       	mov	r22, r15
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	6f e6       	ldi	r22, 0x6F	; 111
     c7e:	72 e1       	ldi	r23, 0x12	; 18
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	90 e4       	ldi	r25, 0x40	; 64
     c84:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     c88:	2f e6       	ldi	r18, 0x6F	; 111
     c8a:	32 e1       	ldi	r19, 0x12	; 18
     c8c:	43 e0       	ldi	r20, 0x03	; 3
     c8e:	5c e3       	ldi	r21, 0x3C	; 60
     c90:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     c94:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     c98:	62 bf       	out	0x32, r22	; 50
     c9a:	83 e8       	ldi	r24, 0x83	; 131
     c9c:	83 bf       	out	0x33, r24	; 51
     c9e:	36 c0       	rjmp	.+108    	; 0xd0c <tmr_delay_ms+0x2c2>
     ca0:	6f 2d       	mov	r22, r15
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24
     cb0:	6f e6       	ldi	r22, 0x6F	; 111
     cb2:	72 e1       	ldi	r23, 0x12	; 18
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	91 e4       	ldi	r25, 0x41	; 65
     cb8:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     cbc:	2f e6       	ldi	r18, 0x6F	; 111
     cbe:	32 e1       	ldi	r19, 0x12	; 18
     cc0:	43 e0       	ldi	r20, 0x03	; 3
     cc2:	5d e3       	ldi	r21, 0x3D	; 61
     cc4:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     cc8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     ccc:	62 bf       	out	0x32, r22	; 50
     cce:	84 e8       	ldi	r24, 0x84	; 132
     cd0:	83 bf       	out	0x33, r24	; 51
     cd2:	1c c0       	rjmp	.+56     	; 0xd0c <tmr_delay_ms+0x2c2>
     cd4:	6f 2d       	mov	r22, r15
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     ce0:	9b 01       	movw	r18, r22
     ce2:	ac 01       	movw	r20, r24
     ce4:	6f e6       	ldi	r22, 0x6F	; 111
     ce6:	72 e1       	ldi	r23, 0x12	; 18
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	92 e4       	ldi	r25, 0x42	; 66
     cec:	0e 94 04 07 	call	0xe08	; 0xe08 <__subsf3>
     cf0:	2f e6       	ldi	r18, 0x6F	; 111
     cf2:	32 e1       	ldi	r19, 0x12	; 18
     cf4:	43 e0       	ldi	r20, 0x03	; 3
     cf6:	5e e3       	ldi	r21, 0x3E	; 62
     cf8:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     cfc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     d00:	62 bf       	out	0x32, r22	; 50
     d02:	85 e8       	ldi	r24, 0x85	; 133
     d04:	83 bf       	out	0x33, r24	; 51
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <tmr_delay_ms+0x2c2>
     d08:	12 be       	out	0x32, r1	; 50
     d0a:	13 be       	out	0x33, r1	; 51
     d0c:	08 b6       	in	r0, 0x38	; 56
     d0e:	00 fe       	sbrs	r0, 0
     d10:	fd cf       	rjmp	.-6      	; 0xd0c <tmr_delay_ms+0x2c2>
     d12:	88 b7       	in	r24, 0x38	; 56
     d14:	81 60       	ori	r24, 0x01	; 1
     d16:	88 bf       	out	0x38, r24	; 56
     d18:	13 be       	out	0x33, r1	; 51
     d1a:	27 96       	adiw	r28, 0x07	; 7
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	08 95       	ret

00000d3e <__vector_10>:

ISR_HANDLER(TMR0_CMP)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
	if(gl_overflows > 0)
     d4c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <gl_overflows>
     d50:	99 23       	and	r25, r25
     d52:	79 f0       	breq	.+30     	; 0xd72 <__vector_10+0x34>
	{
		gl_tick++;
     d54:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gl_tick>
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gl_tick>
		if(gl_tick == gl_overflows)
     d5e:	98 13       	cpse	r25, r24
     d60:	11 c0       	rjmp	.+34     	; 0xd84 <__vector_10+0x46>
		{
			g_timeout_flag++;
     d62:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_timeout_flag>
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_timeout_flag>
			gl_tick = 0;			//clear the tick counter again to start new count				
     d6c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <gl_tick>
     d70:	09 c0       	rjmp	.+18     	; 0xd84 <__vector_10+0x46>
		}
	}
	else
	{
		g_timeout_flag++;
     d72:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_timeout_flag>
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_timeout_flag>
		TCNT0 = 0;
     d7c:	12 be       	out	0x32, r1	; 50
		OCR0 = gl_initial_value;
     d7e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gl_initial_value>
     d82:	8c bf       	out	0x3c, r24	; 60
	}
}
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <__vector_11>:

ISR_HANDLER(TMR0_OVF)
{
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	4f 93       	push	r20
     da2:	5f 93       	push	r21
     da4:	6f 93       	push	r22
     da6:	7f 93       	push	r23
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
	if(gl_callBackPtr != NULL_PTR)
     db4:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <gl_callBackPtr>
     db8:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <gl_callBackPtr+0x1>
     dbc:	30 97       	sbiw	r30, 0x00	; 0
     dbe:	99 f0       	breq	.+38     	; 0xde6 <__vector_11+0x54>
	{
		if(gl_overflows > 0)
     dc0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <gl_overflows>
     dc4:	99 23       	and	r25, r25
     dc6:	59 f0       	breq	.+22     	; 0xdde <__vector_11+0x4c>
		{
			gl_tick++;
     dc8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gl_tick>
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gl_tick>
			if(gl_tick == gl_overflows)
     dd2:	98 13       	cpse	r25, r24
     dd4:	08 c0       	rjmp	.+16     	; 0xde6 <__vector_11+0x54>
			{
				gl_callBackPtr();
     dd6:	09 95       	icall
				gl_tick = 0; //clear the tick counter again to start new count
     dd8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <gl_tick>
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <__vector_11+0x54>
			}
		}
		else
		{
			gl_callBackPtr();
     dde:	09 95       	icall
			TCNT0 = gl_initial_value;
     de0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gl_initial_value>
     de4:	82 bf       	out	0x32, r24	; 50
		}
	}
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <__subsf3>:
     e08:	50 58       	subi	r21, 0x80	; 128

00000e0a <__addsf3>:
     e0a:	bb 27       	eor	r27, r27
     e0c:	aa 27       	eor	r26, r26
     e0e:	0e 94 1c 07 	call	0xe38	; 0xe38 <__addsf3x>
     e12:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_round>
     e16:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_pscA>
     e1a:	38 f0       	brcs	.+14     	; 0xe2a <__addsf3+0x20>
     e1c:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_pscB>
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__addsf3+0x20>
     e22:	39 f4       	brne	.+14     	; 0xe32 <__addsf3+0x28>
     e24:	9f 3f       	cpi	r25, 0xFF	; 255
     e26:	19 f4       	brne	.+6      	; 0xe2e <__addsf3+0x24>
     e28:	26 f4       	brtc	.+8      	; 0xe32 <__addsf3+0x28>
     e2a:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_nan>
     e2e:	0e f4       	brtc	.+2      	; 0xe32 <__addsf3+0x28>
     e30:	e0 95       	com	r30
     e32:	e7 fb       	bst	r30, 7
     e34:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_inf>

00000e38 <__addsf3x>:
     e38:	e9 2f       	mov	r30, r25
     e3a:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fp_split3>
     e3e:	58 f3       	brcs	.-42     	; 0xe16 <__addsf3+0xc>
     e40:	ba 17       	cp	r27, r26
     e42:	62 07       	cpc	r22, r18
     e44:	73 07       	cpc	r23, r19
     e46:	84 07       	cpc	r24, r20
     e48:	95 07       	cpc	r25, r21
     e4a:	20 f0       	brcs	.+8      	; 0xe54 <__addsf3x+0x1c>
     e4c:	79 f4       	brne	.+30     	; 0xe6c <__addsf3x+0x34>
     e4e:	a6 f5       	brtc	.+104    	; 0xeb8 <__addsf3x+0x80>
     e50:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_zero>
     e54:	0e f4       	brtc	.+2      	; 0xe58 <__addsf3x+0x20>
     e56:	e0 95       	com	r30
     e58:	0b 2e       	mov	r0, r27
     e5a:	ba 2f       	mov	r27, r26
     e5c:	a0 2d       	mov	r26, r0
     e5e:	0b 01       	movw	r0, r22
     e60:	b9 01       	movw	r22, r18
     e62:	90 01       	movw	r18, r0
     e64:	0c 01       	movw	r0, r24
     e66:	ca 01       	movw	r24, r20
     e68:	a0 01       	movw	r20, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	ff 27       	eor	r31, r31
     e6e:	59 1b       	sub	r21, r25
     e70:	99 f0       	breq	.+38     	; 0xe98 <__addsf3x+0x60>
     e72:	59 3f       	cpi	r21, 0xF9	; 249
     e74:	50 f4       	brcc	.+20     	; 0xe8a <__addsf3x+0x52>
     e76:	50 3e       	cpi	r21, 0xE0	; 224
     e78:	68 f1       	brcs	.+90     	; 0xed4 <__addsf3x+0x9c>
     e7a:	1a 16       	cp	r1, r26
     e7c:	f0 40       	sbci	r31, 0x00	; 0
     e7e:	a2 2f       	mov	r26, r18
     e80:	23 2f       	mov	r18, r19
     e82:	34 2f       	mov	r19, r20
     e84:	44 27       	eor	r20, r20
     e86:	58 5f       	subi	r21, 0xF8	; 248
     e88:	f3 cf       	rjmp	.-26     	; 0xe70 <__addsf3x+0x38>
     e8a:	46 95       	lsr	r20
     e8c:	37 95       	ror	r19
     e8e:	27 95       	ror	r18
     e90:	a7 95       	ror	r26
     e92:	f0 40       	sbci	r31, 0x00	; 0
     e94:	53 95       	inc	r21
     e96:	c9 f7       	brne	.-14     	; 0xe8a <__addsf3x+0x52>
     e98:	7e f4       	brtc	.+30     	; 0xeb8 <__addsf3x+0x80>
     e9a:	1f 16       	cp	r1, r31
     e9c:	ba 0b       	sbc	r27, r26
     e9e:	62 0b       	sbc	r22, r18
     ea0:	73 0b       	sbc	r23, r19
     ea2:	84 0b       	sbc	r24, r20
     ea4:	ba f0       	brmi	.+46     	; 0xed4 <__addsf3x+0x9c>
     ea6:	91 50       	subi	r25, 0x01	; 1
     ea8:	a1 f0       	breq	.+40     	; 0xed2 <__addsf3x+0x9a>
     eaa:	ff 0f       	add	r31, r31
     eac:	bb 1f       	adc	r27, r27
     eae:	66 1f       	adc	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	88 1f       	adc	r24, r24
     eb4:	c2 f7       	brpl	.-16     	; 0xea6 <__addsf3x+0x6e>
     eb6:	0e c0       	rjmp	.+28     	; 0xed4 <__addsf3x+0x9c>
     eb8:	ba 0f       	add	r27, r26
     eba:	62 1f       	adc	r22, r18
     ebc:	73 1f       	adc	r23, r19
     ebe:	84 1f       	adc	r24, r20
     ec0:	48 f4       	brcc	.+18     	; 0xed4 <__addsf3x+0x9c>
     ec2:	87 95       	ror	r24
     ec4:	77 95       	ror	r23
     ec6:	67 95       	ror	r22
     ec8:	b7 95       	ror	r27
     eca:	f7 95       	ror	r31
     ecc:	9e 3f       	cpi	r25, 0xFE	; 254
     ece:	08 f0       	brcs	.+2      	; 0xed2 <__addsf3x+0x9a>
     ed0:	b0 cf       	rjmp	.-160    	; 0xe32 <__addsf3+0x28>
     ed2:	93 95       	inc	r25
     ed4:	88 0f       	add	r24, r24
     ed6:	08 f0       	brcs	.+2      	; 0xeda <__addsf3x+0xa2>
     ed8:	99 27       	eor	r25, r25
     eda:	ee 0f       	add	r30, r30
     edc:	97 95       	ror	r25
     ede:	87 95       	ror	r24
     ee0:	08 95       	ret

00000ee2 <__cmpsf2>:
     ee2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fp_cmp>
     ee6:	08 f4       	brcc	.+2      	; 0xeea <__cmpsf2+0x8>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	08 95       	ret

00000eec <__divsf3>:
     eec:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3x>
     ef0:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_round>
     ef4:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_pscB>
     ef8:	58 f0       	brcs	.+22     	; 0xf10 <__divsf3+0x24>
     efa:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_pscA>
     efe:	40 f0       	brcs	.+16     	; 0xf10 <__divsf3+0x24>
     f00:	29 f4       	brne	.+10     	; 0xf0c <__divsf3+0x20>
     f02:	5f 3f       	cpi	r21, 0xFF	; 255
     f04:	29 f0       	breq	.+10     	; 0xf10 <__divsf3+0x24>
     f06:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_inf>
     f0a:	51 11       	cpse	r21, r1
     f0c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__fp_szero>
     f10:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_nan>

00000f14 <__divsf3x>:
     f14:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fp_split3>
     f18:	68 f3       	brcs	.-38     	; 0xef4 <__divsf3+0x8>

00000f1a <__divsf3_pse>:
     f1a:	99 23       	and	r25, r25
     f1c:	b1 f3       	breq	.-20     	; 0xf0a <__divsf3+0x1e>
     f1e:	55 23       	and	r21, r21
     f20:	91 f3       	breq	.-28     	; 0xf06 <__divsf3+0x1a>
     f22:	95 1b       	sub	r25, r21
     f24:	55 0b       	sbc	r21, r21
     f26:	bb 27       	eor	r27, r27
     f28:	aa 27       	eor	r26, r26
     f2a:	62 17       	cp	r22, r18
     f2c:	73 07       	cpc	r23, r19
     f2e:	84 07       	cpc	r24, r20
     f30:	38 f0       	brcs	.+14     	; 0xf40 <__divsf3_pse+0x26>
     f32:	9f 5f       	subi	r25, 0xFF	; 255
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	44 1f       	adc	r20, r20
     f3c:	aa 1f       	adc	r26, r26
     f3e:	a9 f3       	breq	.-22     	; 0xf2a <__divsf3_pse+0x10>
     f40:	35 d0       	rcall	.+106    	; 0xfac <__divsf3_pse+0x92>
     f42:	0e 2e       	mov	r0, r30
     f44:	3a f0       	brmi	.+14     	; 0xf54 <__divsf3_pse+0x3a>
     f46:	e0 e8       	ldi	r30, 0x80	; 128
     f48:	32 d0       	rcall	.+100    	; 0xfae <__divsf3_pse+0x94>
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	50 40       	sbci	r21, 0x00	; 0
     f4e:	e6 95       	lsr	r30
     f50:	00 1c       	adc	r0, r0
     f52:	ca f7       	brpl	.-14     	; 0xf46 <__divsf3_pse+0x2c>
     f54:	2b d0       	rcall	.+86     	; 0xfac <__divsf3_pse+0x92>
     f56:	fe 2f       	mov	r31, r30
     f58:	29 d0       	rcall	.+82     	; 0xfac <__divsf3_pse+0x92>
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	bb 1f       	adc	r27, r27
     f62:	26 17       	cp	r18, r22
     f64:	37 07       	cpc	r19, r23
     f66:	48 07       	cpc	r20, r24
     f68:	ab 07       	cpc	r26, r27
     f6a:	b0 e8       	ldi	r27, 0x80	; 128
     f6c:	09 f0       	breq	.+2      	; 0xf70 <__divsf3_pse+0x56>
     f6e:	bb 0b       	sbc	r27, r27
     f70:	80 2d       	mov	r24, r0
     f72:	bf 01       	movw	r22, r30
     f74:	ff 27       	eor	r31, r31
     f76:	93 58       	subi	r25, 0x83	; 131
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	3a f0       	brmi	.+14     	; 0xf8a <__divsf3_pse+0x70>
     f7c:	9e 3f       	cpi	r25, 0xFE	; 254
     f7e:	51 05       	cpc	r21, r1
     f80:	78 f0       	brcs	.+30     	; 0xfa0 <__divsf3_pse+0x86>
     f82:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_inf>
     f86:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__fp_szero>
     f8a:	5f 3f       	cpi	r21, 0xFF	; 255
     f8c:	e4 f3       	brlt	.-8      	; 0xf86 <__divsf3_pse+0x6c>
     f8e:	98 3e       	cpi	r25, 0xE8	; 232
     f90:	d4 f3       	brlt	.-12     	; 0xf86 <__divsf3_pse+0x6c>
     f92:	86 95       	lsr	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	f7 95       	ror	r31
     f9c:	9f 5f       	subi	r25, 0xFF	; 255
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__divsf3_pse+0x78>
     fa0:	88 0f       	add	r24, r24
     fa2:	91 1d       	adc	r25, r1
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret
     fac:	e1 e0       	ldi	r30, 0x01	; 1
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	bb 1f       	adc	r27, r27
     fb6:	62 17       	cp	r22, r18
     fb8:	73 07       	cpc	r23, r19
     fba:	84 07       	cpc	r24, r20
     fbc:	ba 07       	cpc	r27, r26
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__divsf3_pse+0xae>
     fc0:	62 1b       	sub	r22, r18
     fc2:	73 0b       	sbc	r23, r19
     fc4:	84 0b       	sbc	r24, r20
     fc6:	ba 0b       	sbc	r27, r26
     fc8:	ee 1f       	adc	r30, r30
     fca:	88 f7       	brcc	.-30     	; 0xfae <__divsf3_pse+0x94>
     fcc:	e0 95       	com	r30
     fce:	08 95       	ret

00000fd0 <__fixunssfsi>:
     fd0:	0e 94 a8 08 	call	0x1150	; 0x1150 <__fp_splitA>
     fd4:	88 f0       	brcs	.+34     	; 0xff8 <__fixunssfsi+0x28>
     fd6:	9f 57       	subi	r25, 0x7F	; 127
     fd8:	98 f0       	brcs	.+38     	; 0x1000 <__fixunssfsi+0x30>
     fda:	b9 2f       	mov	r27, r25
     fdc:	99 27       	eor	r25, r25
     fde:	b7 51       	subi	r27, 0x17	; 23
     fe0:	b0 f0       	brcs	.+44     	; 0x100e <__fixunssfsi+0x3e>
     fe2:	e1 f0       	breq	.+56     	; 0x101c <__fixunssfsi+0x4c>
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	1a f0       	brmi	.+6      	; 0xff4 <__fixunssfsi+0x24>
     fee:	ba 95       	dec	r27
     ff0:	c9 f7       	brne	.-14     	; 0xfe4 <__fixunssfsi+0x14>
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <__fixunssfsi+0x4c>
     ff4:	b1 30       	cpi	r27, 0x01	; 1
     ff6:	91 f0       	breq	.+36     	; 0x101c <__fixunssfsi+0x4c>
     ff8:	0e 94 c2 08 	call	0x1184	; 0x1184 <__fp_zero>
     ffc:	b1 e0       	ldi	r27, 0x01	; 1
     ffe:	08 95       	ret
    1000:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_zero>
    1004:	67 2f       	mov	r22, r23
    1006:	78 2f       	mov	r23, r24
    1008:	88 27       	eor	r24, r24
    100a:	b8 5f       	subi	r27, 0xF8	; 248
    100c:	39 f0       	breq	.+14     	; 0x101c <__fixunssfsi+0x4c>
    100e:	b9 3f       	cpi	r27, 0xF9	; 249
    1010:	cc f3       	brlt	.-14     	; 0x1004 <__fixunssfsi+0x34>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b3 95       	inc	r27
    101a:	d9 f7       	brne	.-10     	; 0x1012 <__fixunssfsi+0x42>
    101c:	3e f4       	brtc	.+14     	; 0x102c <__fixunssfsi+0x5c>
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__floatunsisf>:
    102e:	e8 94       	clt
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <__floatsisf+0x12>

00001032 <__floatsisf>:
    1032:	97 fb       	bst	r25, 7
    1034:	3e f4       	brtc	.+14     	; 0x1044 <__floatsisf+0x12>
    1036:	90 95       	com	r25
    1038:	80 95       	com	r24
    103a:	70 95       	com	r23
    103c:	61 95       	neg	r22
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	99 23       	and	r25, r25
    1046:	a9 f0       	breq	.+42     	; 0x1072 <__floatsisf+0x40>
    1048:	f9 2f       	mov	r31, r25
    104a:	96 e9       	ldi	r25, 0x96	; 150
    104c:	bb 27       	eor	r27, r27
    104e:	93 95       	inc	r25
    1050:	f6 95       	lsr	r31
    1052:	87 95       	ror	r24
    1054:	77 95       	ror	r23
    1056:	67 95       	ror	r22
    1058:	b7 95       	ror	r27
    105a:	f1 11       	cpse	r31, r1
    105c:	f8 cf       	rjmp	.-16     	; 0x104e <__floatsisf+0x1c>
    105e:	fa f4       	brpl	.+62     	; 0x109e <__floatsisf+0x6c>
    1060:	bb 0f       	add	r27, r27
    1062:	11 f4       	brne	.+4      	; 0x1068 <__floatsisf+0x36>
    1064:	60 ff       	sbrs	r22, 0
    1066:	1b c0       	rjmp	.+54     	; 0x109e <__floatsisf+0x6c>
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	8f 4f       	sbci	r24, 0xFF	; 255
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	16 c0       	rjmp	.+44     	; 0x109e <__floatsisf+0x6c>
    1072:	88 23       	and	r24, r24
    1074:	11 f0       	breq	.+4      	; 0x107a <__floatsisf+0x48>
    1076:	96 e9       	ldi	r25, 0x96	; 150
    1078:	11 c0       	rjmp	.+34     	; 0x109c <__floatsisf+0x6a>
    107a:	77 23       	and	r23, r23
    107c:	21 f0       	breq	.+8      	; 0x1086 <__floatsisf+0x54>
    107e:	9e e8       	ldi	r25, 0x8E	; 142
    1080:	87 2f       	mov	r24, r23
    1082:	76 2f       	mov	r23, r22
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <__floatsisf+0x5e>
    1086:	66 23       	and	r22, r22
    1088:	71 f0       	breq	.+28     	; 0x10a6 <__floatsisf+0x74>
    108a:	96 e8       	ldi	r25, 0x86	; 134
    108c:	86 2f       	mov	r24, r22
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	2a f0       	brmi	.+10     	; 0x109e <__floatsisf+0x6c>
    1094:	9a 95       	dec	r25
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	da f7       	brpl	.-10     	; 0x1094 <__floatsisf+0x62>
    109e:	88 0f       	add	r24, r24
    10a0:	96 95       	lsr	r25
    10a2:	87 95       	ror	r24
    10a4:	97 f9       	bld	r25, 7
    10a6:	08 95       	ret

000010a8 <__fp_cmp>:
    10a8:	99 0f       	add	r25, r25
    10aa:	00 08       	sbc	r0, r0
    10ac:	55 0f       	add	r21, r21
    10ae:	aa 0b       	sbc	r26, r26
    10b0:	e0 e8       	ldi	r30, 0x80	; 128
    10b2:	fe ef       	ldi	r31, 0xFE	; 254
    10b4:	16 16       	cp	r1, r22
    10b6:	17 06       	cpc	r1, r23
    10b8:	e8 07       	cpc	r30, r24
    10ba:	f9 07       	cpc	r31, r25
    10bc:	c0 f0       	brcs	.+48     	; 0x10ee <__fp_cmp+0x46>
    10be:	12 16       	cp	r1, r18
    10c0:	13 06       	cpc	r1, r19
    10c2:	e4 07       	cpc	r30, r20
    10c4:	f5 07       	cpc	r31, r21
    10c6:	98 f0       	brcs	.+38     	; 0x10ee <__fp_cmp+0x46>
    10c8:	62 1b       	sub	r22, r18
    10ca:	73 0b       	sbc	r23, r19
    10cc:	84 0b       	sbc	r24, r20
    10ce:	95 0b       	sbc	r25, r21
    10d0:	39 f4       	brne	.+14     	; 0x10e0 <__fp_cmp+0x38>
    10d2:	0a 26       	eor	r0, r26
    10d4:	61 f0       	breq	.+24     	; 0x10ee <__fp_cmp+0x46>
    10d6:	23 2b       	or	r18, r19
    10d8:	24 2b       	or	r18, r20
    10da:	25 2b       	or	r18, r21
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <__fp_cmp+0x3e>
    10de:	08 95       	ret
    10e0:	0a 26       	eor	r0, r26
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <__fp_cmp+0x3e>
    10e4:	a1 40       	sbci	r26, 0x01	; 1
    10e6:	a6 95       	lsr	r26
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	81 1d       	adc	r24, r1
    10ec:	81 1d       	adc	r24, r1
    10ee:	08 95       	ret

000010f0 <__fp_inf>:
    10f0:	97 f9       	bld	r25, 7
    10f2:	9f 67       	ori	r25, 0x7F	; 127
    10f4:	80 e8       	ldi	r24, 0x80	; 128
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	08 95       	ret

000010fc <__fp_nan>:
    10fc:	9f ef       	ldi	r25, 0xFF	; 255
    10fe:	80 ec       	ldi	r24, 0xC0	; 192
    1100:	08 95       	ret

00001102 <__fp_pscA>:
    1102:	00 24       	eor	r0, r0
    1104:	0a 94       	dec	r0
    1106:	16 16       	cp	r1, r22
    1108:	17 06       	cpc	r1, r23
    110a:	18 06       	cpc	r1, r24
    110c:	09 06       	cpc	r0, r25
    110e:	08 95       	ret

00001110 <__fp_pscB>:
    1110:	00 24       	eor	r0, r0
    1112:	0a 94       	dec	r0
    1114:	12 16       	cp	r1, r18
    1116:	13 06       	cpc	r1, r19
    1118:	14 06       	cpc	r1, r20
    111a:	05 06       	cpc	r0, r21
    111c:	08 95       	ret

0000111e <__fp_round>:
    111e:	09 2e       	mov	r0, r25
    1120:	03 94       	inc	r0
    1122:	00 0c       	add	r0, r0
    1124:	11 f4       	brne	.+4      	; 0x112a <__fp_round+0xc>
    1126:	88 23       	and	r24, r24
    1128:	52 f0       	brmi	.+20     	; 0x113e <__fp_round+0x20>
    112a:	bb 0f       	add	r27, r27
    112c:	40 f4       	brcc	.+16     	; 0x113e <__fp_round+0x20>
    112e:	bf 2b       	or	r27, r31
    1130:	11 f4       	brne	.+4      	; 0x1136 <__fp_round+0x18>
    1132:	60 ff       	sbrs	r22, 0
    1134:	04 c0       	rjmp	.+8      	; 0x113e <__fp_round+0x20>
    1136:	6f 5f       	subi	r22, 0xFF	; 255
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	8f 4f       	sbci	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	08 95       	ret

00001140 <__fp_split3>:
    1140:	57 fd       	sbrc	r21, 7
    1142:	90 58       	subi	r25, 0x80	; 128
    1144:	44 0f       	add	r20, r20
    1146:	55 1f       	adc	r21, r21
    1148:	59 f0       	breq	.+22     	; 0x1160 <__fp_splitA+0x10>
    114a:	5f 3f       	cpi	r21, 0xFF	; 255
    114c:	71 f0       	breq	.+28     	; 0x116a <__fp_splitA+0x1a>
    114e:	47 95       	ror	r20

00001150 <__fp_splitA>:
    1150:	88 0f       	add	r24, r24
    1152:	97 fb       	bst	r25, 7
    1154:	99 1f       	adc	r25, r25
    1156:	61 f0       	breq	.+24     	; 0x1170 <__fp_splitA+0x20>
    1158:	9f 3f       	cpi	r25, 0xFF	; 255
    115a:	79 f0       	breq	.+30     	; 0x117a <__fp_splitA+0x2a>
    115c:	87 95       	ror	r24
    115e:	08 95       	ret
    1160:	12 16       	cp	r1, r18
    1162:	13 06       	cpc	r1, r19
    1164:	14 06       	cpc	r1, r20
    1166:	55 1f       	adc	r21, r21
    1168:	f2 cf       	rjmp	.-28     	; 0x114e <__fp_split3+0xe>
    116a:	46 95       	lsr	r20
    116c:	f1 df       	rcall	.-30     	; 0x1150 <__fp_splitA>
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <__fp_splitA+0x30>
    1170:	16 16       	cp	r1, r22
    1172:	17 06       	cpc	r1, r23
    1174:	18 06       	cpc	r1, r24
    1176:	99 1f       	adc	r25, r25
    1178:	f1 cf       	rjmp	.-30     	; 0x115c <__fp_splitA+0xc>
    117a:	86 95       	lsr	r24
    117c:	71 05       	cpc	r23, r1
    117e:	61 05       	cpc	r22, r1
    1180:	08 94       	sec
    1182:	08 95       	ret

00001184 <__fp_zero>:
    1184:	e8 94       	clt

00001186 <__fp_szero>:
    1186:	bb 27       	eor	r27, r27
    1188:	66 27       	eor	r22, r22
    118a:	77 27       	eor	r23, r23
    118c:	cb 01       	movw	r24, r22
    118e:	97 f9       	bld	r25, 7
    1190:	08 95       	ret

00001192 <__mulsf3>:
    1192:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__mulsf3x>
    1196:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_round>
    119a:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_pscA>
    119e:	38 f0       	brcs	.+14     	; 0x11ae <__mulsf3+0x1c>
    11a0:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_pscB>
    11a4:	20 f0       	brcs	.+8      	; 0x11ae <__mulsf3+0x1c>
    11a6:	95 23       	and	r25, r21
    11a8:	11 f0       	breq	.+4      	; 0x11ae <__mulsf3+0x1c>
    11aa:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_inf>
    11ae:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_nan>
    11b2:	11 24       	eor	r1, r1
    11b4:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__fp_szero>

000011b8 <__mulsf3x>:
    11b8:	0e 94 a0 08 	call	0x1140	; 0x1140 <__fp_split3>
    11bc:	70 f3       	brcs	.-36     	; 0x119a <__mulsf3+0x8>

000011be <__mulsf3_pse>:
    11be:	95 9f       	mul	r25, r21
    11c0:	c1 f3       	breq	.-16     	; 0x11b2 <__mulsf3+0x20>
    11c2:	95 0f       	add	r25, r21
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	55 1f       	adc	r21, r21
    11c8:	62 9f       	mul	r22, r18
    11ca:	f0 01       	movw	r30, r0
    11cc:	72 9f       	mul	r23, r18
    11ce:	bb 27       	eor	r27, r27
    11d0:	f0 0d       	add	r31, r0
    11d2:	b1 1d       	adc	r27, r1
    11d4:	63 9f       	mul	r22, r19
    11d6:	aa 27       	eor	r26, r26
    11d8:	f0 0d       	add	r31, r0
    11da:	b1 1d       	adc	r27, r1
    11dc:	aa 1f       	adc	r26, r26
    11de:	64 9f       	mul	r22, r20
    11e0:	66 27       	eor	r22, r22
    11e2:	b0 0d       	add	r27, r0
    11e4:	a1 1d       	adc	r26, r1
    11e6:	66 1f       	adc	r22, r22
    11e8:	82 9f       	mul	r24, r18
    11ea:	22 27       	eor	r18, r18
    11ec:	b0 0d       	add	r27, r0
    11ee:	a1 1d       	adc	r26, r1
    11f0:	62 1f       	adc	r22, r18
    11f2:	73 9f       	mul	r23, r19
    11f4:	b0 0d       	add	r27, r0
    11f6:	a1 1d       	adc	r26, r1
    11f8:	62 1f       	adc	r22, r18
    11fa:	83 9f       	mul	r24, r19
    11fc:	a0 0d       	add	r26, r0
    11fe:	61 1d       	adc	r22, r1
    1200:	22 1f       	adc	r18, r18
    1202:	74 9f       	mul	r23, r20
    1204:	33 27       	eor	r19, r19
    1206:	a0 0d       	add	r26, r0
    1208:	61 1d       	adc	r22, r1
    120a:	23 1f       	adc	r18, r19
    120c:	84 9f       	mul	r24, r20
    120e:	60 0d       	add	r22, r0
    1210:	21 1d       	adc	r18, r1
    1212:	82 2f       	mov	r24, r18
    1214:	76 2f       	mov	r23, r22
    1216:	6a 2f       	mov	r22, r26
    1218:	11 24       	eor	r1, r1
    121a:	9f 57       	subi	r25, 0x7F	; 127
    121c:	50 40       	sbci	r21, 0x00	; 0
    121e:	9a f0       	brmi	.+38     	; 0x1246 <__mulsf3_pse+0x88>
    1220:	f1 f0       	breq	.+60     	; 0x125e <__mulsf3_pse+0xa0>
    1222:	88 23       	and	r24, r24
    1224:	4a f0       	brmi	.+18     	; 0x1238 <__mulsf3_pse+0x7a>
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	bb 1f       	adc	r27, r27
    122c:	66 1f       	adc	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	91 50       	subi	r25, 0x01	; 1
    1234:	50 40       	sbci	r21, 0x00	; 0
    1236:	a9 f7       	brne	.-22     	; 0x1222 <__mulsf3_pse+0x64>
    1238:	9e 3f       	cpi	r25, 0xFE	; 254
    123a:	51 05       	cpc	r21, r1
    123c:	80 f0       	brcs	.+32     	; 0x125e <__mulsf3_pse+0xa0>
    123e:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_inf>
    1242:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__fp_szero>
    1246:	5f 3f       	cpi	r21, 0xFF	; 255
    1248:	e4 f3       	brlt	.-8      	; 0x1242 <__mulsf3_pse+0x84>
    124a:	98 3e       	cpi	r25, 0xE8	; 232
    124c:	d4 f3       	brlt	.-12     	; 0x1242 <__mulsf3_pse+0x84>
    124e:	86 95       	lsr	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b7 95       	ror	r27
    1256:	f7 95       	ror	r31
    1258:	e7 95       	ror	r30
    125a:	9f 5f       	subi	r25, 0xFF	; 255
    125c:	c1 f7       	brne	.-16     	; 0x124e <__mulsf3_pse+0x90>
    125e:	fe 2b       	or	r31, r30
    1260:	88 0f       	add	r24, r24
    1262:	91 1d       	adc	r25, r1
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	97 f9       	bld	r25, 7
    126a:	08 95       	ret

0000126c <__tablejump2__>:
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	05 90       	lpm	r0, Z+
    1272:	f4 91       	lpm	r31, Z
    1274:	e0 2d       	mov	r30, r0
    1276:	09 94       	ijmp

00001278 <_exit>:
    1278:	f8 94       	cli

0000127a <__stop_program>:
    127a:	ff cf       	rjmp	.-2      	; 0x127a <__stop_program>
